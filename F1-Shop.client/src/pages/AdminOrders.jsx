import React, { useEffect, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { getAllOrders, statusUpdateOrder } from "../api/orders";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent
} from "@/components/ui/card";
import { Select } from "@/components/ui/select";
import { ScrollArea } from "@/components/ui/scroll-area";

const AdminOrders = () => {
  const { user } = useAuth();
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  const loadOrders = async () => {
    try {
      const data = await getAllOrders();
      setOrders(data);
    } catch (err) {
      console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –Ω–∞—Ä–∞—á–∫–∏:", err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user?.isAdmin || user?.role === "admin") {
      loadOrders();
    } else {
      setLoading(false);
    }
  }, [user]);

  const handleStatusChange = async (orderId, newStatus) => {
    try {
      await statusUpdateOrder(orderId, newStatus);
      await loadOrders();
    } catch (err) {
      alert(err.response?.data?.message || "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–º–µ–Ω–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å.");
    }
  };

  if (!user || (!user.isAdmin && user.role !== "admin")) {
    return <p className="text-center text-destructive">‚ùå –ù–µ–º–∞—Ç–µ –ø—Ä–∏—Å—Ç–∞–ø –¥–æ –æ–≤–∞–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.</p>;
  }

  return (
    <div className="max-w-7xl mx-auto p-6">
      <Card>
        <CardHeader>
          <CardTitle>üßæ –°–∏—Ç–µ –Ω–∞—Ä–∞—á–∫–∏</CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <p>–í—á–∏—Ç—É–≤–∞—ö–µ...</p>
          ) : orders.length === 0 ? (
            <p>–ù–µ–º–∞ –Ω–∞—Ä–∞—á–∫–∏.</p>
          ) : (
            <ScrollArea className="overflow-x-auto">
              <table className="w-full text-sm border">
                <thead className="bg-black text-white">
                  <tr>
                    <th className="p-2 border">–ö–æ—Ä–∏—Å–Ω–∏–∫</th>
                    <th className="p-2 border">–ü—Ä–æ–∏–∑–≤–æ–¥–∏</th>
                    <th className="p-2 border">–í–∫—É–ø–Ω–æ</th>
                    <th className="p-2 border">–ü–ª–∞—Ç–µ–Ω–æ</th>
                    <th className="p-2 border">–î–∞—Ç—É–º</th>
                    <th className="p-2 border">–°—Ç–∞—Ç—É—Å</th>
                  </tr>
                </thead>
                <tbody>
                  {orders.map((order) => (
                    <tr key={order._id} className="hover:bg-muted/30">
                      <td className="p-2 border">
                        {order.user?.name} ({order.user?.email})
                      </td>
                      <td className="p-2 border">
                        <ul className="list-disc pl-5">
                          {order.items.map((item, idx) => (
                            <li key={idx}>
                              {item.product?.name} √ó {item.quantity}
                            </li>
                          ))}
                        </ul>
                      </td>
                      <td className="p-2 border">{order.totalPrice} –¥–µ–Ω</td>
                      <td className="p-2 border">{order.isPaid ? "‚úÖ –î–∞" : "‚ùå –ù–µ"}</td>
                      <td className="p-2 border">{new Date(order.createdAt).toLocaleString()}</td>
                      <td className="p-2 border">
                        <select
                          value={order.status}
                          onChange={(e) => handleStatusChange(order._id, e.target.value)}
                          className="border rounded px-2 py-1"
                        >
                          <option value="pending">üïí Pending</option>
                          <option value="approved">‚úÖ Approved</option>
                          <option value="shipped">üöö Shipped</option>
                          <option value="delivered">üì¶ Delivered</option>
                          <option value="cancelled">‚ùå Cancelled</option>
                        </select>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </ScrollArea>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default AdminOrders;
