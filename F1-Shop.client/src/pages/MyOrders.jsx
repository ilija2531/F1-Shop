import React, { useEffect, useState } from "react";
import { getMyOrders, deleteMyOrder } from "../api/orders";
import { useAuth } from "../context/AuthContext";

const MyOrders = () => {
  const { user } = useAuth();
  const [orders, setOrders] = useState([]);

  const loadOrders = async () => {
    try {
      const data = await getMyOrders();
      setOrders(data);
    } catch (err) {
      console.error("–ù–µ—É—Å–ø–µ—à–Ω–æ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞—Ä–∞—á–∫–∏:", err.message);
    }
  };

  useEffect(() => {
    if (user) {
      loadOrders();
    }
  }, [user]);

  const handleCancel = async (orderId) => {
    if (!window.confirm("–î–∞–ª–∏ —Å—Ç–µ —Å–∏–≥—É—Ä–Ω–∏ –¥–µ–∫–∞ —Å–∞–∫–∞—Ç–µ –¥–∞ —ò–∞ –æ—Ç–∫–∞–∂–µ—Ç–µ –Ω–∞—Ä–∞—á–∫–∞—Ç–∞?")) return;
    try {
      await deleteMyOrder(orderId);
      alert("–ù–∞—Ä–∞—á–∫–∞—Ç–∞ –µ –æ—Ç–∫–∞–∂–∞–Ω–∞.");
      loadOrders(); 
    } catch (err) {
      alert(err.response?.data?.message || "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∂—É–≤–∞—ö–µ.");
    }
  };

  if (!user) return <p>–ú–æ—Ä–∞ –¥–∞ —Å—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏ –∑–∞ –¥–∞ –≥–∏ –≤–∏–¥–∏—Ç–µ –≤–∞—à–∏—Ç–µ –Ω–∞—Ä–∞—á–∫–∏.</p>;

  return (
    <div style={{ padding: "2rem" }}>
      <h2>üõçÔ∏è –ú–æ–∏—Ç–µ –Ω–∞—Ä–∞—á–∫–∏</h2>
      {orders.length === 0 ? (
        <p>–ù–µ–º–∞—Ç–µ –Ω–∞–ø—Ä–∞–≤–µ–Ω–æ –Ω–∏—Ç—É –µ–¥–Ω–∞ –Ω–∞—Ä–∞—á–∫–∞.</p>
      ) : (
        <table border="1" cellPadding="8" style={{ borderCollapse: "collapse", width: "100%" }}>
          <thead>
            <tr>
              <th>–ü—Ä–æ–∏–∑–≤–æ–¥–∏</th>
              <th>–í–∫—É–ø–Ω–æ</th>
              <th>–ü–ª–∞—Ç–µ–Ω–æ</th>
              <th>–î–∞—Ç—É–º</th>
              <th>–ê–∫—Ü–∏—ò–∞</th>
            </tr>
          </thead>
          <tbody>
            {orders.map((order) => (
              <tr key={order._id}>
                <td>
                  <ul style={{ paddingLeft: "1rem" }}>
                    {order.items.map((item, idx) => (
                      <li key={idx}>
                        {item.product?.name} √ó {item.quantity}
                      </li>
                    ))}
                  </ul>
                </td>
                <td>{order.totalPrice} –¥–µ–Ω</td>
                <td>{order.isPaid ? "‚úÖ –î–∞" : "‚ùå –ù–µ"}</td>
                <td>{new Date(order.createdAt).toLocaleString()}</td>
                <td>
                  {!order.isPaid ? (
                    <button
                      onClick={() => handleCancel(order._id)}
                      style={{
                        backgroundColor: "red",
                        color: "#fff",
                        border: "none",
                        padding: "0.3rem 0.6rem",
                        cursor: "pointer",
                        borderRadius: "4px",
                      }}
                    >
                      –û—Ç–∫–∞–∂–∏
                    </button>
                  ) : (
                    <span style={{ color: "#888" }}>–ù–µ–º–∞</span>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default MyOrders;
