import React, { useEffect, useState } from "react";
import { getMyOrders, deleteMyOrder } from "../api/orders";
import { useAuth } from "../context/AuthContext";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import FadeIn from "../components/FadeIn";

const MyOrders = () => {
  const { user } = useAuth();
  const [orders, setOrders] = useState([]);

  const loadOrders = async () => {
    try {
      const data = await getMyOrders();
      setOrders(data);
    } catch (err) {
      console.error("–ù–µ—É—Å–ø–µ—à–Ω–æ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞—Ä–∞—á–∫–∏:", err.message);
    }
  };

  useEffect(() => {
    if (user) {
      loadOrders();
    }
  }, [user]);

  const handleCancel = async (orderId) => {
    if (!window.confirm("–î–∞–ª–∏ —Å—Ç–µ —Å–∏–≥—É—Ä–Ω–∏ –¥–µ–∫–∞ —Å–∞–∫–∞—Ç–µ –¥–∞ —ò–∞ –æ—Ç–∫–∞–∂–µ—Ç–µ –Ω–∞—Ä–∞—á–∫–∞—Ç–∞?")) return;
    try {
      await deleteMyOrder(orderId);
      alert("–ù–∞—Ä–∞—á–∫–∞—Ç–∞ –µ –æ—Ç–∫–∞–∂–∞–Ω–∞.");
      loadOrders();
    } catch (err) {
      alert(err.response?.data?.message || "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∂—É–≤–∞—ö–µ.");
    }
  };

  if (!user) return <p className="text-center">–ú–æ—Ä–∞ –¥–∞ —Å—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏ –∑–∞ –¥–∞ –≥–∏ –≤–∏–¥–∏—Ç–µ –≤–∞—à–∏—Ç–µ –Ω–∞—Ä–∞—á–∫–∏.</p>;

  return (
    <div className="max-w-5xl mx-auto p-6">
      <FadeIn className="mb-6" delay={0.2} duration={0.8}>
        <Separator />
      <Card>
        <CardHeader>
          <CardTitle>üõçÔ∏è –ú–æ–∏—Ç–µ –Ω–∞—Ä–∞—á–∫–∏</CardTitle>
        </CardHeader>
        <CardContent>
          {orders.length === 0 ? (
            <p className="text-center">–ù–µ–º–∞—Ç–µ –Ω–∞–ø—Ä–∞–≤–µ–Ω–æ –Ω–∏—Ç—É –µ–¥–Ω–∞ –Ω–∞—Ä–∞—á–∫–∞.</p>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full text-sm border-collapse">
                <thead>
                  <tr className="border-b bg-muted">
                    <th className="text-left p-2">–ü—Ä–æ–∏–∑–≤–æ–¥–∏</th>
                    <th className="text-left p-2">–í–∫—É–ø–Ω–æ</th>
                    <th className="text-left p-2">–ü–ª–∞—Ç–µ–Ω–æ</th>
                    <th className="text-left p-2">–î–∞—Ç—É–º</th>
                    <th className="text-left p-2">–ê–∫—Ü–∏—ò–∞</th>
                  </tr>
                </thead>
                <tbody>
                  {orders.map((order) => (
                    <tr key={order._id} className="border-b hover:bg-muted/30">
                      <td className="p-2">
                        <ul className="list-disc pl-4">
                          {order.items.map((item, idx) => (
                            <li key={idx}>
                              {item.product?.name} √ó {item.quantity}
                            </li>
                          ))}
                        </ul>
                      </td>
                      <td className="p-2">{order.totalPrice} –¥–µ–Ω</td>
                      <td className="p-2">{order.isPaid ? "‚úÖ –î–∞" : "‚ùå –ù–µ"}</td>
                      <td className="p-2">{new Date(order.createdAt).toLocaleString()}</td>
                      <td className="p-2">
                        {!order.isPaid ? (
                          <Button
                            variant="destructive"
                            size="sm"
                            onClick={() => handleCancel(order._id)}
                          >
                            –û—Ç–∫–∞–∂–∏
                          </Button>
                        ) : (
                          <span className="text-muted-foreground text-xs">–ù–µ–º–∞</span>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
      </Card>
      </FadeIn>
    </div>
  );
};

export default MyOrders;
